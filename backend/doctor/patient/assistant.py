import asyncio
import os
from agents import Agent, ItemHelpers, OpenAIChatCompletionsModel, Runner, function_tool, run_demo_loop, set_tracing_disabled, RunContextWrapper, AsyncOpenAI
from dotenv import load_dotenv
from pymongo import MongoClient
import rich

#----------------------------------------------------------------

load_dotenv()
# set_tracing_disabled(disabled=True)

#----------------------------------------------------------------

GEMINI_API_KEY : str = os.getenv("GEMINI_API_KEY")
MODEL : str = "gemini-2.5-flash"
mongodp =  os.getenv("mongodp")

#----------------------------------------------------------------

external_client = AsyncOpenAI(
    api_key = GEMINI_API_KEY,
    base_url = "https://generativelanguage.googleapis.com/v1beta/openai/"
)

model = OpenAIChatCompletionsModel(
    model = MODEL,
    openai_client = external_client 
)


# -----------------------------tools--------------------------------------------------

@function_tool
async def patient_history(userName: str):
    """
     Retrieves the complete medical history of a patient.

    ### Arguments:
    - `userName` (`str`): The username of the patient whose history is to be retrieved.

    ### Returns:
    - Patient's complete medical history data.
    """
    try:
        with MongoClient(mongodp, tls=True) as client:
            db = client["AHMS"]
            collection = db["patients"]

            result = collection.find_one({"userName": userName})

            if result:
                result["_id"] = ""
                result["password"] = ""


                summary_agent = Agent(
                    name="Summary Assistant",
                    instructions="""
                    ### Summary Assistant Instructions

                    You are a **Summary Assistant Agent**. Your task is to generate a **comprehensive medical summary** for a patient using all the data provided in the database.

                    ---

                    ### üîπ Your Responsibilities:
                    - Create a complete summary of the **patient's profile** and **all medical records** found in the `doctorDetails` list.
                    - Include all diagnoses, medications, allergies, monitoring instructions, and alert thresholds as provided.
                    - Ensure your summary is **accurate**, **clear**, and **professional**.

                    ---

                    ### ‚ö†Ô∏è Important Guidelines:

                    - Use **only** the data provided in the patient record.
                    - Do **NOT** add, assume, or infer any medical information.
                    - Do **NOT** create or modify anything in the `agentDetails` field.
                    - Your job is to summarize the full patient profile ‚Äî **not** individual sessions.

                    ---

                    ### ü©∫ What to Include in the Summary:

                    #### Patient Profile:
                    - **Full Name**
                    - **Gender**
                    - **Age**
                    - **Phone Number**
                    - **Username**
                    - **Consent Status**
                    - **Last Session Date & Time**

                    #### Medical History:
                    For each doctor entry in `doctorDetails`, summarize the following:

                    ---

                    **Doctor:** Dr. {doctorFullName} ({doctorSpecialization})  
                    **Hospital:** {hospital}  
                    **Date & Time of Entry:** {date} at {time}

                    - **Primary Diagnosis:** ...
                    - **Blood Type:** ...
                    - **Current Medications:** ...
                    - **Prescribed Medication:** ...
                    - **Allergies:** ...
                    - **Monitoring Instructions:**
                    - ...
                    - ...
                    - **Alert Thresholds (if available):**
                    - Systolic BP Max: ...
                    - Diastolic BP Max: ...
                    - Glucose Max: ...

                    ---


                    ### ‚ÑπÔ∏è About `agentDetails` Field:

                    - The `agentDetails` list may contain **session-based summaries** generated by **other agents**.
                    - You should **not** generate or modify any entry in `agentDetails`.
                    - Focus **only** on summarizing the core patient and medical data.

                    ---

                    ### ‚úÖ Final Notes:

                    - Your output must be **data-driven**, **factually accurate**, and **well-organized**.
                    - Do **not** invent or assume anything outside of the provided data.
                    - Present the summary in a format that is easy to read and useful for doctors, nurses, or future agents.

                    """,
                    model=model,
                )

                run = await Runner.run(summary_agent, f"{result}")
                return run.final_output
            
            else:
                return """
                ### ‚ùå Patient Not Found

                The patient history could not be retrieved because the provided **username is incorrect or does not exist** in the database.

                #### Please check:
                - That you entered the correct username.
                - The username matches exactly (including capitalization, if required).

                You may try again with the correct username.
                """

    except:
        return"""
        ### ‚ö†Ô∏è Unable to Generate Patient Summary

        There was an error retrieving the patient's data from the database.
        As a result, I am unable to generate the patient's medical summary at this time.

        #### Possible Reasons:
        - The patient's record does not exist.
        - There was a temporary issue connecting to the database.
        - The data may be incomplete or corrupted.

        Please try again later
        """

# -----------------------agent instructions--------------------------------------------

async def agent_instructions(ctx: RunContextWrapper, agent: Agent):
    try:
        with MongoClient(mongodp, tls=True) as client:
            db = client["AHMS"]
            collection = db["patients"]

            result = collection.find_one({"userName": ctx.context})
            
            if result:
                return f"""
                            
                ### Patient Monitoring Assistant Instructions

                You are an assistant doctor working under Dr. {result["doctorDetails"][-1]["doctorfullName"]} (Specialization: {result["doctorDetails"][-1]["doctorSpecialization"]}).  
                Your main responsibility is to **monitor the patient** according to the doctor's treatment plan and instructions.

                #### Patient Monitoring Task:
                - Follow the **Treatment Plan** provided by the doctor strictly.
                - Monitor the patient's condition carefully during each session.
                - Log all observations as per the doctor's instructions.
                - Pay attention to specific **monitoring instructions**, such as:
                    - Monitoring blood pressure (BP) twice daily.
                    - Checking glucose levels after meals.
                    - Alerting if medication is missed or thresholds are crossed.

                #### Patient Details Provided:
                - Full Name: {result["fullName"]}
                - Phone Number: {result["phoneNumber"]}
                - Age: {result["age"]}
                - Gender: {result["gender"]}
                - Username: {result["userName"]}
                - Consent Status: {result["consent"]}
                - Session Date & Time: {result["date"]} at {result["time"]}
                - Hospital Name : {result["doctorDetails"][-1]["hospital"]}

                #### Medical Details from Doctor:
                - Primary Diagnosis: {result["doctorDetails"][-1]["primaryDiagnosis"]}
                - Blood Type: {result["doctorDetails"][-1]["bloodType"]}
                - Current Medications: {result["doctorDetails"][-1]["currentMedications"]}
                - Allergies: {result["doctorDetails"][-1]["allergies"]}
                - Prescribed Medication: {result["doctorDetails"][-1]["prescribedMedication"]}
                - Monitoring Instructions: {result["doctorDetails"][-1]["monitoringInstructions"]}
                - Alert Thresholds:
                    - Systolic BP Max: {result["doctorDetails"][-1]["systolicBP_Max"]}
                    - Diastolic BP Max: {result["doctorDetails"][-1]["diastolicBP_Max"]}
                    - Glucose Max: {result["doctorDetails"][-1]["GlucoseMax"]}
                - Doctor Added Details Date & Time: : {result["doctorDetails"][-1]["date"]} & Time {result["doctorDetails"][-1]["time"]}

                ---

                **Important:** Do not alter any data from the database. Use it exactly as provided. Your job is to assist in monitoring and following the doctor's plan to ensure patient safety and effective treatment.
                
                ### üîß Tools Available:

                #### `patient_history`
                - Use this tool to fetch the **complete medical history** of a patient using their `username`.
                - If you need full patient details, use the `patient_history` tool by passing the correct `username`.
                
                """
                
            else:
                return f"""
                ### Patient Monitoring Assistant Instructions (Data Not Found)

                You are an assistant doctor agent. However, we were **unable to retrieve the patient's data from the database** for the username: `{ctx.context}`.

                #### What You Should Do:
                - Do **not** proceed with any patient monitoring tasks yet.
                - Inform the patient politely that there is a temporary issue retrieving their medical information.
                - Reassure them that this may be a technical issue and **ask them to wait for a moment**.
                - Do **not** attempt to guess or assume any medical details.

                #### Suggested Message to Patient:
                > "It looks like we are currently experiencing a delay in retrieving your medical information. Please hold on for a moment while we resolve this issue. Thank you for your patience."

                ---

                ### üîß Tools Available:

                #### `patient_history`
                - Use this tool to fetch the **complete medical history** of a patient using their `username`.
                - If you need full patient details, use the `patient_history` tool by passing the correct `username`.
                
                **Note:** This is a fallback instruction. No patient-specific data is available at the moment. Wait until the system is able to fetch the required information.

                """
    except Exception as e:
        print(e)
        return f"""
    
        ### Patient Monitoring Assistant Instructions (Data Not Found)

        You are an assistant doctor agent. However, we were **unable to retrieve the patient's data from the database** for the username: `{ctx.context}`.

        #### What You Should Do:
        - Do **not** proceed with any patient monitoring tasks yet.
        - Inform the patient politely that there is a temporary issue retrieving their medical information.
        - Reassure them that this may be a technical issue and **ask them to wait for a moment**.
        - Do **not** attempt to guess or assume any medical details.

        #### Suggested Message to Patient:
        > "It looks like we are currently experiencing a delay in retrieving your medical information. Please hold on for a moment while we resolve this issue. Thank you for your patience."

        ---
        
        ### üîß Tools Available:

        #### `patient_history`
        - Use this tool to fetch the **complete medical history** of a patient using their `username`.
        - If you need full patient details, use the `patient_history` tool by passing the correct `username`.

        **Note:** This is a fallback instruction. No patient-specific data is available at the moment. Wait until the system is able to fetch the required information.

        """

# ----------------------------main agent---------------------------------------

async def patient_assistant(messages: list[dict], userName: str):
    try:
        agent = Agent(
            name="Doctor Assistant",
            instructions=agent_instructions,
            tools=[patient_history],
            model=model,
        )
        
        response = Runner.run_streamed(agent, input=messages, context=userName)
        # return response.final_output
        async for event in response.stream_events():
            if event.type == "raw_response_event":
                continue
            elif event.type == "agent_updated_stream_event":
                # print(f"Agent updated: {event.new_agent.name}")
                continue
            elif event.type == "run_item_stream_event":
                if event.item.type == "tool_call_item":
                    pass
                elif event.item.type == "tool_call_output_item":
                    pass
                elif event.item.type == "message_output_item":
                    return(ItemHelpers.text_message_output(event.item))
                else:
                    pass 
    except:
        return f"Sorry, I'm currently unavailable. Please try again in a few moments. "
    

# asyncio.run(patient_assistant("mujy ye bata o ky mujy mery history do", "saif"))













# async def main(userName: str):

#     run = await Runner.run(agent, "hello tumary mujye ye batao ky mein kia karro", context=userName)

#     print(run.final_output)



# asyncio.run(main("saif"))

# chat_history = []

# while True:
#     user_input = input("You: ")

#     if user_input.lower() in ["exit", "quit"]:
#         print("\nChat Ended.")
#         break

#     # Add user message
#     chat_history.append({"role": "user", "content": user_input})

#     # Call assistant synchronously
#     assistant_reply = Runner.run_sync(agent, user_input, context="saif")

#     # Extract clean final output
#     reply_text = getattr(assistant_reply, "final_output", "").strip()

#     if reply_text:
#         chat_history.append({"role": "assistant", "content": reply_text})
#         print(f"[assistant] {reply_text}")
#     else:
#         print("[assistant] (No response)")

# # Optional: Print full chat history at the end
# print("\n--- Full Chat History ---")
# for msg in chat_history:
#     print(f"[{msg['role']}] {msg['content']}")
